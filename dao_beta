package pick_go.dao;

import java.sql.*;
import java.util.*;

import pick_go.dto.PlaceDTO;

public class PlaceDAO {

    private static final String jdbcUrl = "jdbc:mysql://localhost:3306/ipp_pickgo?useSSL=false&serverTimezone=UTC";
    private static final String dbUser = "root";
    private static final String dbPass = "jang1107";

    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            throw new RuntimeException("JDBC 드라이버 로딩 실패", e);
        }
    }

    public List<PlaceDTO> findPlacesByTags(List<String> keywords) throws Exception {
        List<PlaceDTO> results = new ArrayList<>();

        try (Connection conn = DriverManager.getConnection(jdbcUrl, dbUser, dbPass)) {

            // 1. 태그 이름으로 태그 ID 조회
            String tagSql = "SELECT id FROM tag WHERE LOWER(name) IN (" +
                    String.join(",", Collections.nCopies(keywords.size(), "?")) + ")";
            PreparedStatement tagStmt = conn.prepareStatement(tagSql);
            for (int i = 0; i < keywords.size(); i++) {
                tagStmt.setString(i + 1, keywords.get(i));
            }

            ResultSet tagRs = tagStmt.executeQuery();
            List<Integer> tagIds = new ArrayList<>();
            while (tagRs.next()) {
                tagIds.add(tagRs.getInt("id"));
            }

            if (tagIds.size() != keywords.size()) {
                // 일부 태그가 DB에 존재하지 않음
                return results;
            }

            // 2. 해당 태그들을 모두 포함하는 장소 조회 (JOIN + GROUP BY + HAVING)
            StringBuilder sql = new StringBuilder();
            sql.append("SELECT p.name, p.image_url ")
               .append("FROM place p ")
               .append("JOIN place_tag pt ON p.id = pt.place_id ")
               .append("WHERE pt.tag_id IN (")
               .append(String.join(",", Collections.nCopies(tagIds.size(), "?")))
               .append(") ")
               .append("GROUP BY p.id ")
               .append("HAVING COUNT(DISTINCT pt.tag_id) = ?");

            PreparedStatement stmt = conn.prepareStatement(sql.toString());
            int idx = 1;
            for (Integer tagId : tagIds) {
                stmt.setInt(idx++, tagId);
            }
            stmt.setInt(idx, tagIds.size());

            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                String name = rs.getString("name");
                String imageUrl = rs.getString("image_url");
                results.add(new PlaceDTO(name, imageUrl));
            }
        }

        return results;
    }
}
